
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "11_demos\python_packages\pandas\demo_reshaping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_11_demos_python_packages_pandas_demo_reshaping.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_11_demos_python_packages_pandas_demo_reshaping.py:

Reshaping data
=================

.. GENERATED FROM PYTHON SOURCE LINES 5-21

.. code-block:: default

    import pandas as pd
    import numpy as np


    tuples = list(
        zip(
            *[
                ["bar", "bar", "baz", "baz", "foo", "foo", "qux", "qux"],
                ["one", "two", "one", "two", "one", "two", "one", "two"],
            ]
        )
    )
    index = pd.MultiIndex.from_tuples(tuples, names=["first", "second"])
    dataFrame = pd.DataFrame(np.random.randn(8, 2), index=index, columns=["A", "B"])
    dataFrame2 = dataFrame[:4]








.. GENERATED FROM PYTHON SOURCE LINES 23-24

**Stack**

.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: default

    stacked = dataFrame2.stack()








.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    stacked.unstack()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>A</th>
          <th>B</th>
        </tr>
        <tr>
          <th>first</th>
          <th>second</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">bar</th>
          <th>one</th>
          <td>-0.554887</td>
          <td>0.638492</td>
        </tr>
        <tr>
          <th>two</th>
          <td>1.603665</td>
          <td>1.977195</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">baz</th>
          <th>one</th>
          <td>-0.433228</td>
          <td>0.564101</td>
        </tr>
        <tr>
          <th>two</th>
          <td>0.739366</td>
          <td>-0.816024</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    stacked.unstack(1)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>second</th>
          <th>one</th>
          <th>two</th>
        </tr>
        <tr>
          <th>first</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">bar</th>
          <th>A</th>
          <td>-0.554887</td>
          <td>1.603665</td>
        </tr>
        <tr>
          <th>B</th>
          <td>0.638492</td>
          <td>1.977195</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">baz</th>
          <th>A</th>
          <td>-0.433228</td>
          <td>0.739366</td>
        </tr>
        <tr>
          <th>B</th>
          <td>0.564101</td>
          <td>-0.816024</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    stacked.unstack(0)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>first</th>
          <th>bar</th>
          <th>baz</th>
        </tr>
        <tr>
          <th>second</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="2" valign="top">one</th>
          <th>A</th>
          <td>-0.554887</td>
          <td>-0.433228</td>
        </tr>
        <tr>
          <th>B</th>
          <td>0.638492</td>
          <td>0.564101</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">two</th>
          <th>A</th>
          <td>1.603665</td>
          <td>0.739366</td>
        </tr>
        <tr>
          <th>B</th>
          <td>1.977195</td>
          <td>-0.816024</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 36-37

**Pivot tables**

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default

    dataFrame = pd.DataFrame(
        {
            "A": ["one", "one", "two", "three"] * 3,
            "B": ["A", "B", "C"] * 4,
            "C": ["foo", "foo", "foo", "bar", "bar", "bar"] * 2,
            "D": np.random.randn(12),
            "E": np.random.randn(12),
        }
    )








.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    pd.pivot_table(dataFrame, values="D", index=["A", "B"], columns=["C"])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>C</th>
          <th>bar</th>
          <th>foo</th>
        </tr>
        <tr>
          <th>A</th>
          <th>B</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="3" valign="top">one</th>
          <th>A</th>
          <td>0.427408</td>
          <td>0.081922</td>
        </tr>
        <tr>
          <th>B</th>
          <td>0.732450</td>
          <td>-0.332109</td>
        </tr>
        <tr>
          <th>C</th>
          <td>-0.668688</td>
          <td>-0.644812</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">three</th>
          <th>A</th>
          <td>0.975939</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>B</th>
          <td>NaN</td>
          <td>0.025847</td>
        </tr>
        <tr>
          <th>C</th>
          <td>0.445298</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">two</th>
          <th>A</th>
          <td>NaN</td>
          <td>0.472312</td>
        </tr>
        <tr>
          <th>B</th>
          <td>1.680834</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>C</th>
          <td>NaN</td>
          <td>-1.301363</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 51-52

**Time series**

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: default

    indexData = pd.date_range("1/5/2022", periods=100, freq="S")
    timeStemps = pd.Series(np.random.randint(0, 500, len(indexData)), index=indexData)
    timeStemps.resample("5Min").sum()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2022-01-05    24493
    Freq: 5T, dtype: int32



.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    timeStempsUTC = timeStemps.tz_localize("UTC")








.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: default

    timeStempsUTC.tz_convert("US/Eastern")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2022-01-04 19:00:00-05:00    351
    2022-01-04 19:00:01-05:00     77
    2022-01-04 19:00:02-05:00    269
    2022-01-04 19:00:03-05:00    415
    2022-01-04 19:00:04-05:00     47
                                ... 
    2022-01-04 19:01:35-05:00    357
    2022-01-04 19:01:36-05:00    484
    2022-01-04 19:01:37-05:00    162
    2022-01-04 19:01:38-05:00    128
    2022-01-04 19:01:39-05:00    340
    Freq: S, Length: 100, dtype: int32



.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: default

    ps = timeStemps.to_period()








.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: default

    ps.to_timestamp()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2022-01-05 00:00:00    351
    2022-01-05 00:00:01     77
    2022-01-05 00:00:02    269
    2022-01-05 00:00:03    415
    2022-01-05 00:00:04     47
                          ... 
    2022-01-05 00:01:35    357
    2022-01-05 00:01:36    484
    2022-01-05 00:01:37    162
    2022-01-05 00:01:38    128
    2022-01-05 00:01:39    340
    Freq: S, Length: 100, dtype: int32



.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: default

    prng = pd.period_range("1990Q1", "2000Q4", freq="Q-NOV")
    ts = pd.Series(np.random.randn(len(prng)), prng)
    ts.index = (prng.asfreq("M", "e") + 1).asfreq("H", "s") + 9







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.049 seconds)


.. _sphx_glr_download_11_demos_python_packages_pandas_demo_reshaping.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_reshaping.py <demo_reshaping.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_reshaping.ipynb <demo_reshaping.ipynb>`
