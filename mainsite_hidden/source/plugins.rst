.. _sec-plugins:

Plugins
=========

One of the most important features of **itom** is its plugin system. Using plugins, **itom** is able to communicate with many hardware components, such as framegrabbers, cameras, motor stages or other devices. Furthermore it is possible to develop user defined algorithms in C/C++ and put them into an algorithm plugin. The call to these algorithms is then possible via the Python scripting language or other plugins.

The **itom** setup already comes with a small part of exemplary plugins. Other plugins are available as source files in the corresponding plugin repository (https://bitbucket.org/itom/plugins). Furthermore, the SDK of **itom** provide some template files for creating your own plugin using CMake and the development environment of your choice (see http://itom.bitbucket.org/latest/docs/07_plugins/development/pluginCreateCMake.html).


Add a plugin to itom
---------------------

For loading a plugin library at startup of **itom**, the following things must be met:

1. The plugin library is contained in any subfolder of the folder **plugin** contained in the application (root) directory of **itom**
2. If **itom** is build in debug, the plugin must be compiled in debug as well. The same holds for the default release versions.
3. If the plugin depends on further 3rd party libraries, these libraries must be accessible by your operating system (on Windows: Their path must be contained in the PATH environment variable OR the necessary DLLs must be in the **lib** subfolder of **itom** or in the root directory of **itom**). Only if the plugin is able to load further libraries by means of a delay load mechanism, it is possible to also put 3rd party libraries in arbitrary folders.
4. If your plugin depends on 3rd party libraries, please make sure that all plugins use exactly the same version of the same library.

Available plugins
------------------

The following plugins are contained in the open source plugin repository https://bitbucket.org/itom/plugins (and some of them are also already included in the setup of **itom**):

Cameras / Grabbers / AD-Converter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* **CMU1394 - firewire cameras via generic CMU driver**
    
    This plugins provides generic firewire camera support based on CMU-Driver version 6.4.6. CMU 6.4.6 works for firewire specifications <= v1.30. This library is currently developed and tested under Windows only. Tested with PointGrayResearch Firefly and AVT Marlin.

    In order to run this plugin you also need to install the CMU1394 drivers that can be obtained as installer from http://www.cs.cmu.edu/~iwan/1394/. Together with this plugin parts of the drivers (some header files and static libraries for 32 and 64bit) in version 6.4.6 are shipped and linked to this plugin at comile time. Therefore you need to install the drivers for the same version as well. Otherwise you can also change the files in the corresponding source folder of this plugin.

    This plugin is released under the LGPL license (CMU1394 is LGPL licensed, too).

* **DummyGrabber - virtual white noise grabber**
    
    The DummyGrabber is a virtual camera which emulates a camera with white noise.

    The camera is initialized with a maximum width and height of the simulated camera chip (both need to be a multiple of 4). The noise is always scaled in the range between 0 and the current bitdepth (bpp - bit per pixel). The real size of the camera image is controlled using the parameters x0, y0, x1 and y1 if the sizes stay within the limits given by the size of the camera chip.

    This plugin can also be used as template for other grabber. For the simulation of real measurement systems, please also check the plugin 'emulationGrabber'
    
    This plugin is released under the LGPL license.

* **FileGrabber - a virtual grabber that loads images from files**
    
    This plugin emulates a camera by grabbing images from files in a specific folder on the hard disk. Alternatively, it is possible to iteratively load images from a 3D-data object (stack). The first possibility uses the command imread from OpenCV (OpenCV library highgui required).
    
    The grabber can work in 3 different modes:
    
    1) Files in a specified folder are sequentially loaded each time a getVal / copyVal is performed. At the moment only 8 and 16 bit images are supported.
    2) Images are sequentially loaded from a 3D data object (stack of images). Each getVal / copyVal returns a reference/copy to the specific plane of the stack. Supports 8, 12, 14, 16, 24-bit.
    3) Files in a specified folder are scanned and preloaded to an image stack. Each getVal / copyVal returns a reference/copy to the specific plane of the stack. Supports 8, 12, 14, 16, 24-bit.
    
    In the second case, provide the objectStack argument, arguments bpp and sourceFolder are ignored. bpp is generated by the type and value range of the objectStack.
    
    This plugin is released under the LGPL license.

* **OpenCVGrabber - OpenCV Video Capture (USB-Cameras, Firewire CMU1394)**
    
    This plugin wraps the video capture framework of OpenCV. Therefore it requires further libraries of OpenCV (core, highgui, improc and partially tbb).
    
    Usually all ordinary USB cameras are supported. If you compiled OpenCV with the CMU1384 flag, these firewire cameras are supported as well. Currently, a queuing problem in the Windows version for USB cameras exists. Therefore the plugin requests multiple images per frame in order to finally get the newest one. Therefore this implementation is not the fastest connection to any USB cameras.
    
    Some supported cameras are only available if OpenCV is compiled with their support, e.g. CMU1394 (not included per default in pre-compiled binaries of OpenCV.
    
    This plugin is released under the LGPL license.

* **PCOPixelFly - PCO Pixelfly cameras**
    
    This plugin connects the grabber family Pixelfly from PCO to itom. It has mainly been tested with the camera 'pixelfly qe', that is connected to the computer by the PCO PCI interface board 540.
    
    Please install first the necessary drivers for the camera and grabber board from www.pco.de. This plugin supports two families of drivers. The driver with major version 1 only supports Windows, 32bit operating systems, while the new driver version 2 also operates on 64bit Windows systems.
    
    This plugin is released under the LGPL license, the necessary camera SDK belongs to PCO - Computer Optics GmbH.

* **QCam - camera support for cameras from QImaging**
    
    This plugin is currently under development.

* **Vistek - SVS Vistek GigE grabber**
    
    itom plugin for GigE cameras from SVS Vistek. Every camera is simply initialized by the serial number of the connected SVS Vistek camera. (see camera housing).
    
    Some files of the SVGigE SDK are shipped within this plugin (currently 1.4.24). Please check the SVSVistek website for newer versions of the SDK and replace the files if desired. Additionally, it is stated that SVS Vistek does not provide any support for this specific plugin wrapping the official SDK of SVS Vistek.
    
    This plugin is released under the LGPL license. The necessary Vistek drivers, header files and libraries have their own license.

* **PointGreyCamera**
    
    will be released soon
    
* **XIMEA grabbers**
    
    will be released soon

* **PCO Cameras - general plugin for PCO cameras**
    
    will be release soon

* **AlliedVision Fire Grabber**
    
    will be release soon

Motors / Actuators
~~~~~~~~~~~~~~~~~~~

* **DummyMotor - a virtual motor to test real actuators**
    
    The DummyMotor is a virtual actuator plugin that emulates up to 10 linear axes.
    
    The real number of simulated axes is given by the initialization parameter 'numAxis'. Use this plugin to simulate or develop your measurement system at another computer. Whenever a position command is executed, this plugin sleeps until the time needed for the positioning (with respect to the speed of the axis) expired.
    
    This plugin is released under the LGPL license.

* **LeicaMotorFocus - plugin for Leica MZ12.X focus actuators**
    
    The LeiceMotorFocus is an itom-plugin, which can be used to control the z-stage of Leica MZ12 or MZ12.5 stereo-microscopes.
    
    For the initialization of this plugin you already need an opened serial IO port (using the plugin 'SerialIO'). Give the handle of the opened serial port to the constructor of this plugin. This plugin will keep a reference of the serial port until the actuator is closed again.
    
    This plugin is released under the LGPL license.

* **PIPiezoCtrl - PI Piezos E662, E-816, E-621, E-625 or E665**
    
    The PIPiezoCtrl is an itom-plugin, which can be used to communicate with PI piezo-controllers. Different PI-Piezo Controller (E-816, E-621, E-625, E-665 or E662) are implemented.
    
    It has been tested with different Piefocs and Piezo-stages. This system needs a serial port, which differs depending on the controller type. The parameters of the serial port (besides port number) are set automatically during initialization.
    
    WARNING: The calibration between applied voltage and desired position is depending on every single PI device and is stored in the corresponding PI controller. Therefore don't mix stages and controllers but only use the original, calibrated combination.
    
    This plugin is released under the LGPL license.

* **USBMotion3XIII - motor driver for the USB Motion 3x III card from COPTONIX GmbH**
    
    This plugin is a wrapper for the driver of the USB Motion 3x III card of COPTONIX GmbH (www.coptonix.com). It is able to address up to three different 3-phase stepper motors with up to 64 microstep-accuracy.
    
    The controller is connected to the computer by a USB connection. The wrapper addresses the methods given by the Windows library provided by COPTONIX. For more information about the driver see the corresponding website of the manufacturer (The 64bit DLL was directly provided by COPTONIX).
    
    If you change any parameters like speed or acceleration, set the values and then read the values again, since the currently set values might slightly differ from the desired values due to rounding uncertainties.
    
    This plugin is released under the LGPL license.

Further hardware devices
~~~~~~~~~~~~~~~~~~~~~~~~~

* **dispWindow - projection window for SLM/LCD-applications**
    
    This plugin opens a borderless window at a given position and displays horizontal or vertical cosine fringes including various graycode fringes (for unwrapping). The visualization is done with the help of OpenGL and the open source library GLEW.
    
    For building this plugin, download (the binaries) of glew from http://glew.sourceforge.net/ and set the variable GLEW_DIR in CMake to the corresponding folder. The necessary library will finally be copied to the lib-folder of itom such that an entry in the environment variable path is not necessary. Please make sure, that you use always the same version of glew for all plugins that require this library.
    
    This plugin is released under the LGPL license.

* **GWInstekPSP - controller for power supplies PSP-405, PSP-603 and PSP-2010 of GWInstek**
    
   This itom-plugin allows communicating with power supplies PSP-405, PSP-603 and PSP-2010 (tested with PSP-405) of company GWInstek. Therefore an opened connected via the serial port (using the plugin 'SerialIO') is required. You need to give a valid handle to this instance when initializing this plugin. 
   
   This plugin is released under the LGPL license.

* **SerialIO - plugin for a serial port communication**
    
    SerialIO is a itom-Plugin which gives direct access to serial ports.\nIt is used by different plugins for communication, (e.g. 'PIPiezoCtrl', 'UhlActuator', 'LeicaMotorFocus').
    
    The plugin is implemented for Windows or Linux; the possible baudrates depend on the possibilites of the operating system.
    
    This plugin is released under the LGPL license.

Algorithms
~~~~~~~~~~~

* **DataObjectIO - import or export dataObject from/to several file formats**
    
    This filter contains two different export- / import-functionalities for dataObjects, image or raw.
    
    Image-export functions converts dataObjects to image data and saves them as common image-formats.
    uint8 or uint16 are saved as gray-values (8bit or if suppored as 16bit) or if the image format allows color are saved according to the defined color palette.
    float32 or float64 are saved as gray-values (8bit or if suppored as 16bit) or according to the defined color palette. Therefore the values must be between 0.0 and 1.0.
    Values outside these borders are clipped. If the image format supports RGBA, invalid values are saved as 00 00 00 FF else as 00 00 00.
    
    Basic export-filter definition: source-obj, filename, palette, ...
    Basic import-filter definition: dst-obj, filename, chanel-specification, ...
    
    Raw-export functions write/read the data to/from txt-based or binary file formats.
    
    This plugin is released under the LGPL license.

* **FittingFilters - plugin with fitting algorithms**
    
    This plugin contains algorithms for fitting planes and other two dimensional polynomials to dataObjects mainly using the method of least-squares. Some of the included algorithms can also be called with weighted values, such that more precise fitting results are achievable.

    Furthermore this plugin also contains methods to finally subtract or reconstruct the fitted surfaces.
    
    This plugin is released under the LGPL license.

* **OpenCVFilters - wrapped algorithms from OpenCV**
    
    This plugin provides wrappers for various OpenCV algorithms. These are for instance:
    
    * morphological filters (dilation, erosion)
    * image filtering (blur, median blur...)
    * 1d and 2d fft and ifft
    * histogram determination
    * feature detections (circles, chessboard corners...)
    
    This plugin not only requires access to the core library of OpenCV but also to further libraries like imgproc and calib3d.
    
    This plugin is released under the LGPL license.

    
Plugin Development
-------------------

If you have any hardware component that is not yet supported by **itom** or if you need to have a specific algorithm implemented as algorithm plugin, you have the following possibilities:

* Start to develop your own plugin library and make this plugin available to anybody if you want to. More information about this can be found under http://itom.bitbucket.org/latest/docs/07_plugins/development/plugin-development.html.
* Since not all plugins are already available in the internet, ask us if for instance we already have the plugin you need.
* Feel also free to contact us if you want us to develop a plugin for you.
* Register to the `mailing list <https://lists.sourceforge.net/lists/listinfo/itom-discussions>`_ and write further questions.

